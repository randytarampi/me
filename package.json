{
  "name": "me",
  "author": {
    "name": "Randy Tarampi",
    "email": "rt@randytarampi.ca",
    "url": "https://www.randytarampi.ca"
  },
  "private": true,
  "devDependencies": {
    "@babel/cli": "7.5.0",
    "@babel/core": "7.5.0",
    "@babel/plugin-proposal-class-properties": "7.4.0",
    "@babel/plugin-proposal-object-rest-spread": "7.4.3",
    "@babel/plugin-transform-property-literals": "7.2.0",
    "@babel/polyfill": "7.4.3",
    "@babel/preset-env": "7.4.3",
    "@babel/preset-react": "7.0.0",
    "@babel/register": "7.4.0",
    "babel-eslint": "10.0.1",
    "babel-loader": "8.0.6",
    "babel-plugin-istanbul": "5.1.4",
    "babel-plugin-lodash": "3.3.4",
    "babel-plugin-minify-replace": "0.5.0",
    "chai": "4.2.0",
    "chai-enzyme": "1.0.0-beta.1",
    "cheerio": "1.0.0-rc.3",
    "chokidar": "3.0.0",
    "commander": "2.20.0",
    "config": "3.1.0",
    "connect-history-api-fallback": "1.6.0",
    "copy-webpack-plugin": "5.0.3",
    "coveralls": "3.0.3",
    "css-loader": "2.1.1",
    "del": "4.1.1",
    "enzyme": "3.9.0",
    "enzyme-adapter-react-16": "1.13.2",
    "eslint-plugin-import": "2.17.3",
    "eslint-plugin-react": "7.13.0",
    "expose-loader": "0.7.5",
    "express": "4.17.1",
    "file-loader": "3.0.1",
    "gulp": "4.0.2",
    "gulp-autoprefixer": "6.1.0",
    "gulp-clean-css": "4.2.0",
    "gulp-concat": "2.6.1",
    "gulp-eslint": "5.0.0",
    "gulp-if": "2.0.2",
    "gulp-mocha": "6.0.0",
    "gulp-pug": "4.0.1",
    "gulp-pug-linter": "1.1.0",
    "gulp-sass": "4.0.2",
    "gulp-sass-lint": "1.4.0",
    "gulp-sourcemaps": "2.6.5",
    "habitat": "3.1.2",
    "history": "4.9.0",
    "html-webpack-harddisk-plugin": "1.0.1",
    "html-webpack-plugin": "4.0.0-beta.5",
    "immutable": "github:randytarampi/immutable-js#me-release",
    "js-yaml": "3.13.1",
    "jsdom": "15.1.1",
    "json-stringify-safe": "5.0.1",
    "koa-compress": "3.0.0",
    "koa-connect": "2.0.1",
    "koa-mount": "4.0.0",
    "koa-static": "5.0.0",
    "lerna": "3.14.1",
    "lodash": "4.17.11",
    "materialize-css": "1.0.0",
    "mini-css-extract-plugin": "0.7.0",
    "mocha": "6.1.4",
    "mock-local-storage": "1.1.8",
    "nyc": "14.1.1",
    "optimize-css-assets-webpack-plugin": "5.0.1",
    "postcss-loader": "3.0.0",
    "postcss-preset-env": "6.6.0",
    "proxyquire": "2.1.0",
    "pug-loader": "2.4.0",
    "raf": "3.4.1",
    "react": "16.8.6",
    "react-dom": "16.8.6",
    "react-hot-loader": "4.8.8",
    "react-materialize": "3.3.0",
    "react-redux": "5.1.1",
    "react-router": "5.0.0",
    "react-router-sitemap": "github:randytarampi/react-router-sitemap#me-release",
    "redux": "4.0.1",
    "redux-mock-store": "1.5.3",
    "redux-thunk": "2.3.0",
    "reselect": "4.0.0",
    "resolve-url-loader": "3.1.0",
    "resume-cli": "github:randytarampi/resume-cli#puppeteer-v1.11.0",
    "sass-loader": "7.1.0",
    "semver-compare": "1.0.0",
    "serverless": "1.44.1",
    "serverless-api-compression": "1.0.1",
    "serverless-domain-manager": "3.2.2",
    "serverless-dynamodb-local": "github:randytarampi/serverless-dynamodb-local#me-release",
    "serverless-offline": "4.10.6",
    "serverless-plugin-tracing": "2.0.0",
    "serverless-plugin-warmup": "4.5.3-rc.1",
    "serverless-secrets": "github:RishitKedia/serverless-secrets#fix-get-parameters-limit-of-10",
    "serverless-webpack": "5.3.0",
    "sinon": "7.3.2",
    "svg-path-loader": "0.0.4",
    "syncpack": "4.5.2",
    "terser-webpack-plugin": "1.3.0",
    "vinyl-paths": "3.0.0",
    "webpack": "4.32.2",
    "webpack-bundle-analyzer": "3.3.2",
    "webpack-cli": "3.3.2",
    "webpack-node-externals": "1.7.2",
    "webpack-sentry-plugin": "2.0.1",
    "webpack-serve": "2.0.3",
    "workbox-webpack-plugin": "4.3.1",
    "ws": "7.0.0",
    "yargs": "13.2.4"
  },
  "bugs": {
    "url": "https://github.com/randytarampi/me/issues",
    "email": "bugs@randytarampi.ca"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/randytarampi/me.git"
  },
  "scripts": {
    "clean": "./bin/clean.sh",
    "bootstrap": "./bin/hoist.sh",
    "prepare": "if [ -z \"$IS_PUBLISHING\" ]; then npm run bootstrap; fi;",
    "lock": "npm run lock:generate",
    "lock:generate": "npm install --package-lock-only && npx lerna exec --concurrency $(node -p \"require(\\\"os\\\").cpus().length\") --no-bail -- npm install --package-lock-only;",
    "lock:clean": "rm package-lock.json packages/*/package-lock.json",
    "lock:rebuild": "npm run lock:clean && npm run lock:generate",
    "audit:fix": "npm audit fix && npx lerna exec --concurrency $(node -p \"require(\\\"os\\\").cpus().length\") --no-bail -- npm audit fix",
    "pretest": "NODE_ENV=test lerna run pretest --no-bail --concurrency $(node -p \"require(\\\"os\\\").cpus().length\")",
    "test": "NODE_ENV=test lerna run test --no-bail --concurrency $(node -p \"require(\\\"os\\\").cpus().length\")",
    "cover:actual": "rm -rf .nyc_output/ coverage/ && lerna run cover --no-bail --concurrency $(node -p \"require(\\\"os\\\").cpus().length\")",
    "cover:collect": "mkdir -p .nyc_output/ coverage/ && lerna exec -- \"if [ -d \"./.nyc_output\" ]; then cp -r .nyc_output ../..; fi;\" && nyc report --reporter=lcov",
    "cover": "npm run cover:actual; npm run cover:collect",
    "coveralls": "cat coverage/lcov.info | coveralls",
    "kill": "lerna run kill"
  },
  "greenkeeper": {
    "commitMessages": {
      "initialBadge": "docs(greenkeeper): Add Greenkeeper badge.",
      "initialDependencies": "chore(greenkeeper): Update dependencies.",
      "initialBranches": "chore(greenkeeper): Whitelist greenkeeper branches.",
      "dependencyUpdate": "chore(greenkeeper): ${dependency}@${version}.",
      "devDependencyUpdate": "chore(greenkeeper): ${dependency}@${version}.",
      "dependencyPin": "fix(greenkeeper): Pin ${dependency}@${oldVersion}.",
      "devDependencyPin": "fix(greenkeeper): Pin ${dependency}@${oldVersion}."
    },
    "prTitles": {
      "initialPR": "chore(greenkeeper): Update dependencies and enable Greenkeeper",
      "initialPrBadge": "docs(greenkeeper): Add Greenkeeper badge and enable Greenkeeper",
      "initialPrBadgeOnly": "docs(greenkeeper): Add Greenkeeper badge",
      "initialSubgroupPR": "chore(greenkeeper): Update dependencies for ${group}",
      "basicPR": "chore(greenkeeper): Update ${dependency}",
      "groupPR": "chore(greenkeeper): Update ${dependency} for ${group}"
    }
  }
}
